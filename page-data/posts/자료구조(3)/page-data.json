{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/자료구조(3)","result":{"data":{"markdownRemark":{"id":"7540a09c-f9df-5f97-94d7-ddf00da340be","html":"<p><em>The Lord is my shepherd, I lack nothing. PSLAM 23:1</em></p>\n<h3 id=\"목표\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목표</h3>\n<p><strong>자료구조 이해하기</strong></p>\n<ul>\n<li>배열이란?</li>\n<li>배열 인덱스를 이용한 데이터 저장/접근법</li>\n<li>배열 탐색</li>\n<li>정적 배열</li>\n<li>동적 배열</li>\n<li>파이썬 리스트(동적 배열)의 비밀</li>\n<li>동적 배열 추가 연산 시간 복잡도</li>\n<li>분할 상환 분석 개념</li>\n<li>분할 상환 분석 적용</li>\n<li>동적 배열 삽입 연산</li>\n<li>동적 배열 삭제 연산</li>\n<li>동적 배열 크기 줄이기</li>\n<li>배열과 동적 배열 정리/비교</li>\n<li>정적 배열에 삽입과 삭제를 못하는 이유</li>\n</ul>\n<h3 id=\"배열이란\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%B4%EB%9E%80\" aria-label=\"배열이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열이란?</h3>\n<p>(파이썬 리스트와 비슷) 파이썬은 c언어를 기반으로 만들어졌고, 파이썬의 list는 c의 배열을 이용해서 만들었습니다.</p>\n<ol>\n<li>\n<p><strong>C의 Array와 Python의 list의 핵심적인 차이</strong><br>\nlist에서는 append method를 쓰면 계속해서 요소를 추가할 수 있다. 반면에 C배열은 크기를 정해놓고 시작한다. 그리고 배열의 각 요소를 다른 값으로 수정할 수는 있지만 지우거나 삭제할 수는 없다. 파이썬 list에서는 다양한 타입의 값들을 담을 수 있는데, c array에서는 같은 타입의 데이터만 담을 수 있다.</p>\n<p>실제로 파이썬 list와 c array가 값을 어떻게 저장하는지 알아야된다.<br>\nc에서는 정수 하나가 4byte이므로 정수 4개를 담기 위해서 총 연속적인 16칸을 정의한다.\n<img src=\"/media/data/%EB%B0%B0%EC%97%B4.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n<p>다음과 같이 파이썬 list를 만들었다고 가정해보자. c배열의 경우 메모리에 연속적으로 2,3,5,7이 저장된다. list는 조금 다른게 2,3,5,7이 연속적인 공간에 있을 수도 있고 아닐 수도 있다. </p>\n<p>그럼 list안에는 뭐가 저장되는 걸까?<br>\n바로 2,3,5,7이 저장된 곳을 가리키고 있다.\n<img src=\"/media/data/%EB%B0%B0%EC%97%B41.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\">\n이렇게하면 뭐가 가능해지냐면, <strong><em>값 자체를 저장하는 것이 아니라서 자료의 크기가 아무리 커도 여기서는 가리키는 역할만 하기 때문에 크고 다양한 타입의 자료를 저장할 수 있는 것이다.</em></strong></p>\n</li>\n</ol>\n<h3 id=\"배열에-데이터를-저장하고-가지고-오는-법\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B3%A0-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%98%A4%EB%8A%94-%EB%B2%95\" aria-label=\"배열에 데이터를 저장하고 가지고 오는 법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>배열에 데이터를 저장하고 가지고 오는 법</strong></h3>\n<p>파이썬에서는 배열을 안쓰기 때문에 c 배열로 설명해보도록 하자(문법은 대충 보자)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">int</span> numArray<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>c에서 위와 같이 배열을 선언하면 정수 4개를 담기 위해서 총 16byte의 공간이 필요하다.  그럼 컴퓨터는 현재 메모리에서 사용하고 있지 않고 연속적인 16칸을 찾는다. 예를들어 주소 1000부터 1015까지..\n<img src=\"/media/data/2.%EB%B0%B0%EC%97%B4.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n<ul>\n<li>값을 저장하고 싶으면 어떻게 해야될까?<br>\n—> index로 하면 된다.\n<img src=\"/media/data/2.%EB%B0%B0%EC%97%B42.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></li>\n<li>\n<p>저장된 데이터를 받아오는 건 어떻게 할 수 있을까?<br>\n—> index를 사용하면 된다.<br>\n그렇다면 받아올때는 내부적으로 어떻게 동작하고 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">numArray <span class=\"token punctuation\">:</span> 이 배열이 시작되는 주소를 가르키고있다<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 정수 5를 찾기위해 어떻게 해야될까?</span>\n<span class=\"token comment\"># 배열이 연속적으로 저장되 있다는 사실을 잊지 말자!</span>\n인덱스 <span class=\"token number\">2</span>주소 <span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> 4x2 <span class=\"token operator\">=</span> <span class=\"token number\">1008</span> </code></pre></div>\n<p><img src=\"/media/data/2.%EB%B0%B0%EC%97%B43.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\">\n시작하는 주소만 알면 어떤 index 던지 찾아 받아올 수 있다.\n<img src=\"/media/data/2.%EB%B0%B0%EC%97%B44.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n</li>\n<li>정리<br>\n배열에 어떤 index 값을 받아오고 싶다면 그 값의 주소를 알아야한다. 그 주소는 간단한 계산으로 구할 수 있다. 그 주소를 알면 O(1)으로 접근이 가능하다. 굉장히 효율적이다. 앞에서 값을 저장하는 방법도 똑같다. 특정 index에 값을 저장하기 위해서는 그 index의 주소를 알아야하는데 주소를 찾아서 그 주소에 O(1)으로 접근하고 값을 저장하면 된다.<br>\n주소만 알고 있으면 한번에 접근할 수 있는 RAM의 특성을 똑똑하게 이용하는 자료구조이다.\n<img src=\"/media/data/2.%EB%B0%B0%EC%97%B45.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></li>\n</ul>\n<h3 id=\"배열-탐색\"><a href=\"#%EB%B0%B0%EC%97%B4-%ED%83%90%EC%83%89\" aria-label=\"배열 탐색 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 탐색</h3>\n<p>탐색은 접근이랑 약간 다르다. 탐색은 특정 조건을 만족하는 값을 찾는 것이다. 특정 조건에 맞는 값을 찾기 위해서는 하나 하나 다 봐야한다.\n예를 들어서 배열 안에 7이 있는 것을 찾기 위해서는 0번 index에서 7이 있는지 확인하고 1번으로가서 확인하고 … 7을 찾을때까지 봐야한다. 이와 같이 데이터를 순서대로 찾는 방법을 <strong><em>선형 탐색</em></strong>이라고 한다 배열 탐색의 효율성을 시간 복잡도로 나타낸다면 배열에 저장한 데이터가 n개일때 탐색 n에 비례한다고 볼 수 있다.</p>\n<p>정리  </p>\n<ul>\n<li>배열 접근 연산 : O(1)</li>\n<li>배열 탐색 연산 : O(n)</li>\n</ul>\n<h3 id=\"정적-배열\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%B0%B0%EC%97%B4\" aria-label=\"정적 배열 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 배열</h3>\n<p>처음 정의할때 크기를 정해놓고 정해진 크기 이상 값을 추가할 수 없다. (요소 수 제한)\n“C 배열”을 말한다. 일반적으로 말하는 array가 정적 배열이다.<br>\n<img src=\"/media/data/3.%EB%B0%B0%EC%97%B4.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n<p>정적 배열에 대해 알아보자.  </p>\n<p>이미 만들어진 배열이 가득차게되면 더이상 추가 할 수 없다. 유일한 해결방법은 정수값 6개를 담을 수 있는 새로운 배열을 만드는 것이다. 실제 과정을 보면..\n<img src=\"/media/data/3.%EB%B0%B0%EC%97%B41.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"><br>\n[1단계] 정수 6개를 담을 수 있는 배열 확보<br>\n[2단계] 2,3,5,7,11을 복사하고 마지막에 13을 저장한다.\n<img src=\"/media/data/3.%EB%B0%B0%EC%97%B42.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n<p>비효율적이고 불편해보인다. 왜 바로 옆에 저장하면 안되는 것일까?\n일단 배열을 정의하면 메모리에서 사용할 수 있는 공간을 찾아야한다. 저장하려고하는 데이터 타입과 갯수에 따라서 얼만큼의 공간이 필요한지 정해진다. 이 메모리 공간은 연속적인 공간이여야 한다.</p>\n<p>다음과 같이 배열 바로 옆에 13을 추가하고 싶은데, 그 공간이 사용해도 되는 공간인지 알 수 없다. 비어있는지 아닌지 알 수 없으니까 그냥 사용하는 것이 위험하다. 이런 위험성을 미리 방지하기 위해서 이 저장공간 내에서만 데이터를 수정하도록 한다.\n<img src=\"/media/data/3.%EB%B0%B0%EC%97%B43.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n<p>그렇다면 처음부터 여유롭게 사용하겠다고 배열을 크게 정의하면 어떨까?\n낭비되는 공간이 많아진다.\n예를들어 5개의 정수를 저장하는데 크기 50,000인 배열을 정의하면, 49,995 개의 정수를 저장할 수 있는 공간이 낭비되는 것이다.\n<img src=\"/media/data/3.%EB%B0%B0%EC%97%B44.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n<h3 id=\"동적-배열\"><a href=\"#%EB%8F%99%EC%A0%81-%EB%B0%B0%EC%97%B4\" aria-label=\"동적 배열 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 배열</h3>\n<p>상황에 맞게 배열의 크기가 바뀌기 때문에 꽉차도 계속해서 값을 추가할 수 있다.\n사실상 동적 배열은 정적 배열을 이용해서 만들었다.\n<img src=\"/media/data/4.%EB%B0%B0%EC%97%B4.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\">\n2배로 늘린 공간을 확보하고 요소를 복사한다.\n<img src=\"/media/data/4.%EB%B0%B0%EC%97%B41.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\">\n다시 2배로 늘린 공간을 확보하고 요소를 복사한다.\n<img src=\"/media/data/4.%EB%B0%B0%EC%97%B42.png\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n<p>정리하면..</p>\n<ul>\n<li>정적 배열로 만들어진 자료 구조</li>\n<li>정적 배열의 크기를 상황에 맞게 조젏한다.</li>\n</ul>\n<p><strong>파이썬 리스트(동적 배열)의 비밀</strong>\n사실 우리는 이미 동적 배열을 사용하고 있다. 파이썬 리스트가 바로 동적 배열이다. C 배열을 이용해서 동적 배열을 구현한 것이다.</p>\n<p>이렇게 5개의 정수 값이 들어간 파이썬 리스트를 만들었다. 파이썬 리스트는 동적 배열이기 때문에, 내부적으로는 C 배열이 만들어진 것이다..</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">int_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>여기에 새로운 값을 추가할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">int_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>우리 입장에서는 내부적으로 얼마나 큰 배열이 있는지 몰라도, 값을 마음대로 추가할 수 있다. 동적 배열이기 때문에 상황에 맞게 배열 크기가 조절되고 있는 것이다.</p>\n<p>그런데, 우리는 list를 사용할 때 현재 내부적으로 사용되고 있는 배열의 크기를 모른다. 아무리 저장한 데이터가 6개여도 내부적으로는 8개짜리 배열일 수도 있고, 12개짜리 배열일 수도 있고, 15개 짜리 배열일 수도 있다. 알 수가 없다.</p>\n<p>그럼 만얀에 리스트의 길이를 출력하면 뭐가 나올까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>int_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#결과</span>\n<span class=\"token number\">6</span></code></pre></div>\n<p>6이라고 나오는데, 실제 사용하고 있는 메모리 공간이 더 많을지라도, 파이썬은 개수를 셀 때 값을 저장해 놓은 공간에 대해서만 알려준다. 그래서 우리는 나머지 공간에 대해서 전혀 신경을 안써도 된다. 오히려 채워지지 않은 공간을 접근하려고하면 오류가 난다.</p>\n<p>우리가 값을 저장해 놓은 공간에만 접근할 수 있도록 파이썬이 미리 처리를 해 놓은 것이다.\n파이썬뿐만 아니라, 동적 배열을 자료형으로 제공하는 대부분의 언어들은 이렇게 실제 사용하는 배열의 크기와 상관없이 저장해 놓은 공간만 사용할 수 있게 처리를 해준다.</p>\n<p>앞으로 이 여유 공간은 항상 빈칸으로 표시하고, 이 공간은 항상 개발자들이 접근할 수 없다고 가정할 것이다.</p>","fields":{"slug":"/posts/자료구조(3)","tagSlugs":null},"frontmatter":{"date":"2020-01-13T22:43:32.169Z","description":"#배열이란?, #배열 인덱스를 이용한 데이터 저장/접근법, #배열 탐색, #정적 배열, #동적 배열, #파이썬 리스트(동적 배열)의 비밀, #동적 배열 추가 연산 시간 복잡도, #분할 상환 분석 개념, #분할 상환 분석 적용, #동적 배열 삽입 연산, #동적 배열 삭제 연산, #동적 배열 크기 줄이기, #배열과 동적 배열 정리/비교, #정적 배열에 삽입과 삭제를 못하는 이유","tags":null,"title":"자료구조(3) : <Array>","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/자료구조(3)"}}}