{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/자료구조","result":{"data":{"markdownRemark":{"id":"163a1dee-83ce-5d87-8939-eca21770eac4","html":"<p><em>The Lord is my shepherd, I lack nothing. PSLAM 23:1</em></p>\n<h3 id=\"목표\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목표</h3>\n<p><strong>자료구조 이해하기</strong></p>\n<ul>\n<li>자료 구조란?</li>\n<li>상황에 맞는 자료 구조</li>\n</ul>\n<h3 id=\"자료-구조란\"><a href=\"#%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0%EB%9E%80\" aria-label=\"자료 구조란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료 구조란?</h3>\n<p><strong>데이터를 저장하고 관리하기 위해서 사용하는 구조이다.</strong>  </p>\n<p>도서관을 예로 들어보자. 로미오와 줄리엣 책을 찾아보자.\n도서관의 책들은 문학 —> 영문고전(세부정보) —> 연도순(기준)이라는 구조 속에 있다. 이런 구조가 유지되는 것은 약속을 정하고 그 약속대로 책을 정리하는 구조가 있기 때문이다.</p>\n<p>컴퓨터에 자료를 저장할때도 도서관에 책들을 정리하는 것처럼 일정한 구조에 맞게 저장을 한다. 컴퓨터과학에서는 이러한 구조를 자료구조라고 한다. 자료구조는 데이터의 효율적인 접근 및 조작을 가능하게 해주는 저장 및 관리 방식입니다.</p>\n<p>프로그래밍을 하다보면 다양한 성격의 데이터를 다루게되는데 어떤 데이터를 다루더라도 그 데이터를 컴퓨터에 저장하고 불러올 수 있어야 된다. 방금 도서관 예시처럼 컴퓨터에서 데이터를 쉽고, 빠르게 찾기 위해서는 특정 구조를 만들어서 관리해야된다. </p>\n<p>이제 데이터를 관리할 수 있는 다양한 방법들을 배우고 여러 상황에 적합한 구조를 고르는 방법에 대해서 알아보자!! (중요)</p>\n<h3 id=\"상황에-맞는-자료-구조\"><a href=\"#%EC%83%81%ED%99%A9%EC%97%90-%EB%A7%9E%EB%8A%94-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0\" aria-label=\"상황에 맞는 자료 구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상황에 맞는 자료 구조</h3>\n<p>상황에 적합한 자료구조를 선택하지 못했을 경우 발생하는 문제를 직접 느껴보기 위해서, list와 set 자료형이 동일한 작업을 수행하는데 걸리는 시간을 비교해보자.\nlist와 set이라는 도서관이 있는데 이 도서관들은 각각 다른 방법으로 책을 저장한다. 이 방식들에서 각각 원하는 책을 찾는데 시간이 얼마나 걸리는지 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token comment\">#주의! 실제로 list와 set은 자료구조 이름이 아니라 python 자료형 이름이다. 두 자료형은 다른 구조 방식을 이용해서 데이터를 저장한다.</span>\n\n<span class=\"token comment\">#0 ~ 10000000를 list에 저장한다.</span>\ntest_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 0 ~ 1000000를 set에 저장한다.</span>\ntest_set <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 특정 데이터가 list에 있는지 확인할 때 걸리는 시간 파악</span>\nt_0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span> <span class=\"token keyword\">in</span> test_list<span class=\"token punctuation\">)</span>\nt_1 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"리스트에서 걸린 시간: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>t_1 <span class=\"token operator\">-</span> t_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 특정 데이터가 set에 있는지 확인할 때 걸리는 시간 파악</span>\nt_0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span> <span class=\"token keyword\">in</span> test_set<span class=\"token punctuation\">)</span>\nt_1 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set에서 걸린 시간: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>t_1 <span class=\"token operator\">-</span> t_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">[</span>결과<span class=\"token punctuation\">]</span>\n<span class=\"token boolean\">True</span>\n리스트에서 걸린 시간<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01602315920</span>\n\n<span class=\"token boolean\">True</span>\n<span class=\"token builtin\">set</span>에서 걸린 시간<span class=\"token punctuation\">:</span> <span class=\"token number\">5.24520875943030</span><span class=\"token operator\">*</span>e<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 경우에는 set이 더 빠르다!!<br>\n만약 1000번을 찾는다고하면 16초 걸린다고 보면 된다.\n모든게 빠른 요즘 사회에서 16가 걸린다면 사람들이 사용하지 않을 것이다.</p>\n<p>모든 경우에 제일 좋은 자료구조는 없다.  </p>\n<p>책을 장르와 제목을 이용해서 찾고 싶을때는 도서관이 구역별로 구조가 짜져있는게 찾기 쉽지만, 도서관에 1000번째로 들어온 책을 찾고 싶을때는 지금 구조는 효율적인 구조가 아니다.  </p>","fields":{"slug":"/posts/자료구조","tagSlugs":null},"frontmatter":{"date":"2020-01-11T22:42:32.169Z","description":"#자료 구조란?, #상황에 맞는 자료구조","tags":null,"title":"자료구조(1) : 자료 구조란?","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/자료구조"}}}