{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/virtualenv","result":{"data":{"markdownRemark":{"id":"918de96b-f495-5a56-9f5b-59d8b7c243b1","html":"<p><em>The Lord is my shepherd, I lack nothing. PSLAM 23:1</em></p>\n<h3 id=\"목표\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목표</h3>\n<p><strong>가상환경 설치</strong></p>\n<ul>\n<li>Virtualenv란?</li>\n<li>Virtualenv, virtualenvWrapper 설치[MAC OS]</li>\n<li>Virtualenv의 기본 명령어(사용법)</li>\n<li>VirtualenvWrapper 설정</li>\n<li>VirtualenvWrapper 명령어(사용법)</li>\n</ul>\n<h3 id=\"virtualenv란\"><a href=\"#virtualenv%EB%9E%80\" aria-label=\"virtualenv란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtualenv란?</h3>\n<p>Virtualenv란 시스템 OS에 설치된 주 python뿐만 아니라 여러 버전의 Python과 프로젝트별로 다른 종류의 라이브러리를 사용하는 것에 있어 가장 핵심된 기능을 제공합니다.</p>\n<p>예를들어, 어떤 옛날 프로젝트에서는 Python2.7버전에 pip로 Django1.6을 사용했다고 가정해봅시다. 하지만 이번에 새로 시작하는 프로젝트는 Python3.6에 pip로 Django1.10을 사용하려고 합니다. 물론 가장 쉬운 방법은 개발 환경별로 다른 컴퓨터를 사용하는 것이지만, 공간적/금전적/편의적으로 어렵습니다.</p>\n<p>따라서 우리는 Python실행파일과 pip로 설치된 라이브러리들을 독립된 폴더에 넣어버리는 방법을 선택할 수 있는데, 이것이 Virtualenv의 핵심입니다.</p>\n<h3 id=\"virtualenv-설치mac-os\"><a href=\"#virtualenv-%EC%84%A4%EC%B9%98mac-os\" aria-label=\"virtualenv 설치mac os permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtualenv 설치[MAC OS]</h3>\n<p>MAC OS에는 시스템 전역에 기본적으로 Python2가 설치되어있기 때문에 아래 명령어로 쉽게 pip를 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sudo easy_install pip</code></pre></div>\n<p>만약 sudo로 시스템 전역에 설치하기가 싫다면 HomeBrew를 이용해 Python을 유저영역에 설치할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ brew install python</code></pre></div>\n<p>pip가 성공적으로 설치되었는지 확인하려면 다음 명령어로 pip의 버전을 확인해 보면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ pip <span class=\"token operator\">-</span>V\n<span class=\"token comment\">#Python3 pip의 경우에는 pip3 -V</span></code></pre></div>\n<p>만약 pip나 pip3이라는 명령어가 먹히지 않는다면 아래의 명령어로 Python의 모듈로서 pip를 호출할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Python2의 경우</span>\n$ python <span class=\"token operator\">-</span>m pip <span class=\"token operator\">-</span>V\n\n<span class=\"token comment\"># Python3의 경우</span>\n$ python3 <span class=\"token operator\">-</span>m pip <span class=\"token operator\">-</span>V</code></pre></div>\n<p>Virtualenv와 VirtualenvWrapper는 pip를 통해 설치가 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Python2의 경우</span>\n$ pip install virtualenv virtualenvwrapper\n\n<span class=\"token comment\"># Python3의 경우</span>\n$ pip3 install virtualenv virtualenvwrapper</code></pre></div>\n<p>만약 pip/pip3 명령이 먹지 않는다면 아래 명령어로 대체할 수 있습니다.\n(시스템에 easy_install로 pip를 설치한 경우 sudo권한이 필요할 수 있는데, 이때는 sudo pip install으로 명령어 앞에 sudo를 붙여줍시다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Python2 pip의 경우</span>\n$ python <span class=\"token operator\">-</span>m pip install virtualenv virtualenvwrapper\n\n<span class=\"token comment\"># Python3 pip의 경우</span>\n$ python3 <span class=\"token operator\">-</span>m pip install virtualenv virtualenvwrapper</code></pre></div>\n<h3 id=\"virtualenv의-기본-명령어사용법\"><a href=\"#virtualenv%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"virtualenv의 기본 명령어사용법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtualenv의 기본 명령어(사용법)</h3>\n<p>Virtualenv는 기본적으로 아래의 명령어로 동작합니다.</p>\n<ol>\n<li>\n<p>가상화면 만들기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ virtualenv <span class=\"token operator\">-</span><span class=\"token operator\">-</span>python<span class=\"token operator\">=</span>파이썬버전 가상환경이름\n<span class=\"token comment\"># ex)</span>\n<span class=\"token comment\"># $ virtualenv --python=python3.5 test_env</span>\n<span class=\"token comment\"># $ virtualenv --python=python2.7 test_env2</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#만약 The path x.x does not exist라는 에러가 난다면 PYTHON의 PATH을 절대경로로 맞춰줘야 합니다. which python3을 했을 때 /usr/bin/python3이 나왔다면, virtualenv --python=/usr/bin/python3와 같이 절대경로로 입력해주시면 됩니다.</span></code></pre></div>\n<p>이와 같이 Python버전을 명시해주고 가상환경을 만들 수 있습니다. (단, 선택할 Python은 시스템에 깔려있는 버전이어야 합니다.)</p>\n</li>\n<li>\n<p>가상환경 활성화(가상환경에 진입)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ source 가상환경이름<span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>activate</code></pre></div>\n</li>\n</ol>\n<p>이후 pip를 통해 외부 모듈과 라이브러리들을 설치하는 경우, source 명령어로 가상환경에 진입하지 않으면 라이브러리들을 불러쓸 수 없게됩니다. 즉, 프로젝트 별로 다른 라이브러리만이 설치된 환경을 구성한 것이죠.</p>\n<h3 id=\"virtualenvwrapper-설정\"><a href=\"#virtualenvwrapper-%EC%84%A4%EC%A0%95\" aria-label=\"virtualenvwrapper 설정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VirtualenvWrapper 설정</h3>\n<p>VirtualEnv를 사용하기 위해서는 source를 이용해 가상환경에 진입합니다. 그러나, 이 진입 방법은 가상환경이 설치된 위치로 이동해야되는 것 뿐 아니라 가상환경이 어느 폴더에 있는지 일일이 사용자가 기억해야 하는 단점이 있습니다. 이를 보완하기 위해 VirtualenvWrapper를 사용합니다.</p>\n<p>또한, VirtualenvWrapper를 사용할 경우 터미널이 현재 위치한 경로와 관계없이 가상환경을 활성화할 수 있다는 장점이 있습니다.</p>\n<p>VirtualenvWrapper는 .bashrc나 .zshrc\u001d에 약간의 설정과정을 거쳐야 합니다.</p>\n<ol>\n<li>\n<p>우선 홈 디렉토리로 이동후 가상환경이 들어갈 폴더 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ cd <span class=\"token operator\">~</span>\n$ mkdir <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>virtualenvs</code></pre></div>\n</li>\n<li>\n<p>홈 디렉토리의 .bashrc나 .zshrc의 파일 제일 마지막에 아래 코드를 복사해 붙여넣어줍시다.\n(파일이 없다면 만들어 사용하시면 됩니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># python virtualenv settings</span>\nexport WORKON_HOME<span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>virtualenvs\nexport VIRTUALENVWRAPPER_PYTHON<span class=\"token operator\">=</span><span class=\"token string\">\"$(which python3)\"</span>  <span class=\"token comment\"># Usage of python3</span>\nsource <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>virtualenvwrapper<span class=\"token punctuation\">.</span>sh</code></pre></div>\n</li>\n<li>\n<p>저장하고 나온 후 터미널을 종료후 새로 켜주면, VirtualenvWrapper의 명령어들을 사용할 수 있습니다. 만약 /usr/local/bin/virtualenvwrapper.sh파일이 존재하지 않는다면 다음 명령어로 virtualenvwrapper.sh파일을 찾아서 위 코드를 바꿔 사용하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">find <span class=\"token operator\">/</span>usr <span class=\"token operator\">-</span>name virtualenvwrapper<span class=\"token punctuation\">.</span>sh\n또는\nwhich virtualenvwrapper<span class=\"token punctuation\">.</span>sh</code></pre></div>\n</li>\n</ol>\n<h3 id=\"virtualenvwrapper-명령어사용법\"><a href=\"#virtualenvwrapper-%EB%AA%85%EB%A0%B9%EC%96%B4%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"virtualenvwrapper 명령어사용법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VirtualenvWrapper 명령어(사용법)</h3>\n<p>VirtualenvWrapper의 명령어는 여러가지가 존재하지만, 이 포스팅에서는 기본적인 것만 다루고 넘어갑니다.</p>\n<ol>\n<li>\n<p>가상환경 만들기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ mkvirtualenv 가상환경이름\n<span class=\"token comment\"># 예시</span>\n<span class=\"token comment\"># $ mkvirtualenv test_env3</span></code></pre></div>\n<p>mkvirtualenv 명령어를 사용할 경우 홈 디렉토리의 .virtualenvs폴더 안에 가상환경이름을 가진 폴더(test_env3)가 생깁니다.</p>\n</li>\n<li>\n<p>가상환경 삭제</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ rmvirtualenv 가상환경이름\n<span class=\"token comment\"># 예시</span>\n<span class=\"token comment\"># $ rmvirtualenv test_env3</span></code></pre></div>\n<p>rmvirtualenv 명령어를 사용할 경우 mkvirtualenv로 만든 가상환경을 지워줍니다.<br>\n만든 가상환경을 지우는 방법은 이방법 뿐 아니라 홈 디렉토리의 .virtualenvs폴더 안의 가상환경이름을 가진 폴더를 지우는 방법도 있습니다.</p>\n</li>\n<li>\n<p>가상환경 활성화(진입) 및 가상환경 목록 보기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ workon 가상환경이름\n<span class=\"token comment\"># 가상환경으로 진입시 앞에 (가상환경이름)이 붙습니다.</span>\n<span class=\"token punctuation\">(</span>가상환경이름<span class=\"token punctuation\">)</span> $\n<span class=\"token comment\"># 예시</span>\n<span class=\"token comment\"># $ workon test_env3</span>\n<span class=\"token comment\"># (test_env3) $</span></code></pre></div>\n<p>workon명령어를 통해 mkvirtualenv로 만든 가상환경으로 진입할 수 있습니다.<br>\nworkon명령어를 가상환경이름 없이 단순하게 칠 경우, 현재 만들어져있는 가상환경의 전체 목록을 불러옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ workon\ntest_env3</code></pre></div>\n</li>\n<li>\n<p>가상환경 비활성화(빠져나오기)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>가상환경이름<span class=\"token punctuation\">)</span> $ deactivate\n<span class=\"token comment\"># 예시</span>\n<span class=\"token comment\"># (test_env3) $ deactivate</span>\n<span class=\"token comment\"># $</span></code></pre></div>\n<p>가상환경에서 빠져나오는 것은 다른것들과 동일하게 deactivate명령어로 빠져나올 수 있습니다.</p>\n</li>\n</ol>","fields":{"slug":"/posts/virtualenv","tagSlugs":null},"frontmatter":{"date":"2020-01-12T22:44:32.169Z","description":"","tags":null,"title":"Virtualenv MacOS 설치 및 사용법","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/virtualenv"}}}