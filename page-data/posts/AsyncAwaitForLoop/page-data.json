{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/AsyncAwaitForLoop/","result":{"data":{"markdownRemark":{"id":"d0cd5d77-1d08-5281-92f6-33f66b1fcb3c","html":"<p><em>The Lord is my shepherd, I lack nothing. PSLAM 23:1</em></p>\n<h3 id=\"preparing-an-example\"><a href=\"#preparing-an-example\" aria-label=\"preparing an example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preparing an example</h3>\n<ul>\n<li>\n<p>과일 바구니에서 과일 수를 얻고 싶다고 가정 해 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fruitBasket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\napple<span class=\"token punctuation\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> \ngrape<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\npear<span class=\"token punctuation\">:</span> <span class=\"token number\">14</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getNumFruit</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fruit</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> fruitBasket<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numApples <span class=\"token operator\">=</span> <span class=\"token function\">getNumFruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numApples<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 27</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"await-in-a-for-loop\"><a href=\"#await-in-a-for-loop\" aria-label=\"await in a for loop permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Await in a for loop</h3>\n<p>과일 바구니에서 얻고 싶은 과일이 여러 개 있다고 가정 해 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> fruitsToGet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>이 배열을 반복 할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">forLoop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Start'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> fruitsToGet<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get num of each fruit</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>for-loop에서 getNumFruit를 사용하여 각 과일의 수를 가져옵니다. 또한 번호를 콘솔에 기록합니다.<br>\ngetNumFruit는 promise를 반환하므로 해결 된 값을 로깅하기 전에 기다릴 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">forLoop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Start'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> fruitsToGet<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fruit <span class=\"token operator\">=</span> fruitsToGet<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">const</span> numFruit <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getNumFruit</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numFruit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>대기를 사용하면 대기 약속이 해결 될 때까지 JavaScript가 실행을 일시 정지 할 것으로 예상합니다.<br>\n이것은 for-loop에서 대기가 직렬로 실행되어야 함을 의미합니다.<br>\n당신은 아래와 같은 결과를 기대할 것이고, 결과가 기대한대로 나올 것 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token string\">'Start'</span>\n    <span class=\"token string\">'Apple: 27'</span>\n    <span class=\"token string\">'Grape: 0'</span>\n    <span class=\"token string\">'Pear: 14'</span>\n    <span class=\"token string\">'End'</span></code></pre></div>\n<h3 id=\"await-in-a-foreach-loop\"><a href=\"#await-in-a-foreach-loop\" aria-label=\"await in a foreach loop permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Await in a forEach loop</h3>\n<p>for-loop 예제에서와 동일한 작업을 수행합니다. 먼저 과일 배열을 반복합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">forEachLoop</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Start'</span><span class=\"token punctuation\">)</span>\n\n    fruitsToGet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruit</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Send a promise for each fruit</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음으로 getNumFruit로 과일 수를 구하려고합니다.<br>\n(콜백 함수에서 async 키워드에 유의하십시오. await는 콜백 함수에 있으므로이 async 키워드가 필요합니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">forEachLoop</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Start'</span><span class=\"token punctuation\">)</span>\n\n    fruitsToGet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">fruit</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> numFruit <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getNumFruit</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numFruit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>당신은 아래와 같은 결과를 기대할 것 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//기대 결과</span>\n<span class=\"token string\">'Start'</span>\n<span class=\"token string\">'27'</span>\n<span class=\"token string\">'0'</span>\n<span class=\"token string\">'14'</span>\n<span class=\"token string\">'End'</span></code></pre></div>\n<p>그러나 실제 결과는 다릅니다. JavaScript는 forEach 루프의 약속이 해결되기 전에 console.log ( ‘End’)를 호출합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//실제 결과</span>\n<span class=\"token string\">'Start'</span>\n<span class=\"token string\">'End'</span>\n<span class=\"token string\">'27'</span>\n<span class=\"token string\">'0'</span>\n<span class=\"token string\">'14'</span></code></pre></div>\n<p>이 동작은 while 및 for-of 루프와 같은 대부분의 루프에서 작동합니다.<br>\n그러나 콜백이 필요한 루프에서는 작동하지 않습니다. 폴 백이 필요한 루프의 예로는 forEach, map, filter 및 reduce가 있습니다.</p>","fields":{"slug":"/posts/AsyncAwaitForLoop/","tagSlugs":null},"frontmatter":{"date":"2019-12-15T22:40:32.169Z","description":"#동시성을 활용한 비동기 호출 제어","tags":null,"title":"JavaScript async and await in loops","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/AsyncAwaitForLoop/"}}}